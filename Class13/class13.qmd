---
title: "Class 13: RNASeq with DESeq2"
author: "Samson A16867000"
format: pdf
---

Today we will analyze some RNA Seq data from Himes et al. on the effects of dexamethasone(Dex), a synthetic glucocorticoid steroid with anti-inflammatory effects

#Data import 

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(counts)
```
>. Q1. How many genes are in this dataset? 

```{r}
nrow(counts)
```
```{r}
head(metadata)
```


>.Q2. How many ‘control’ cell lines do we have? 

```{r}
sum(metadata$dex == "control")
```

## Toy differential expression analysis 

Calculate the mean per gene count vlaues for all "control" samples (i,,e colummns in `counts`) and do the same for "treated" and then compare them 

1. find all "control" values/columns in `counts`

```{r}
control.inds <- metadata$dex == "control"
control.counts <- counts[,control.inds]
head(control.counts)
```


2. Find the mean per gene across all control columns 

>. Q3. How would you make the above code in either approach more robust? Is there a function that could help here? 

We can use the `apply` function 

```{r}
control.mean <- apply(control.counts, 1, mean)
View(control.mean)
```

>. Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated.inds <- metadata$dex == "treated"
treated.counts <- counts[,treated.inds]
head(treated.counts)
```

```{r}
treated.mean <- apply(treated.counts, 1, mean)
View(treated.mean)
```

>. Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
meancounts <- data.frame(control.mean, treated.mean)
plot(meancounts)
```

>. Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot? 

I would use the geom_point function 

>. Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this? 

```{r}
plot(meancounts[,1], meancounts[,2], log = "xy")
```

We most frequently use log2 transformation for this type of data 

```{r}
log2(1/1)

log2(20/10)

log2(10/20)
```

These log2 values make the interprestation of fold-change a little easier and a rule-of-thumb in the field is a log2 fold-change of +2 or -2 is where we start to pay attention 

Let's calculate the lof2(fold-change and add it to our meancount)

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)
head(meancounts)
```
>. Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

The arr.ind arguement allows us to find the rows and column that meet a certain condition. We use the unique function to prevent duplicate rows from appearing, so we can see the rows that are unique

```{r}
to.rm <- rowSums(meancounts[,1:2]==0) > 0
mycounts <- meancounts[!to.rm,]
```

>. Q. How many genes do I have left after this zero count filtering 

```{r}
nrow(mycounts)
```
>. Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

```{r}
sum(mycounts$log2fc >2)
```
>. Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

```{r}
sum(mycounts$log2fc < -2)
```
>. Q10. Do you trust these results? Why or why not?

No because we do not have any statistics on whether or not it is statistically significant, we do not have a p value yet 


## DESeq Analysis 

```{r}
#! message: false 
library(DESeq2)
```

The first funciton that we will use will setup the data in the way DESeq(format) wants it. 

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design= ~dex)
dds
```
The function in the package is called `DESeq` and we can run it on our `dds`

```{r}
dds <- DESeq(dds)
```

I will get the results from dds 

```{r}
res <- results(dds)
head(res)
```

Make a common overall results figure from this analysis, This is designed to keep our inner biologist and inner stats nerd happy - it plot fold-change vs P-value 

## Data Visualization 

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
```

Add some color to this plot 

```{r}
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-logres$padj", xlab="res$log2FoldChange" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```

```{r}
write.csv(res, file = "myresults.csv")
```

I need to translate our gene identifiers "ENSG0000 into gene names that the rest of the world can understand 

To this "annotation" I will use the **AnnotationDbi** package. I can install this with `BiocManager::install()`



```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)

columns(org.Hs.eg.db)
```
I will use the `mapIds()` function to "map" my identifiers to those from different databases. i will go between ENSEMBL and SYMBOL and then after GENENAME 

  
```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                      keys = rownames(res),
                      keytype = "ENSEMBL", 
                      column = "SYMBOL" )
head(res)
```

```{r}
res$name <- mapIds(org.Hs.eg.db,
                      keys = rownames(res),
                      keytype = "ENSEMBL", 
                      column = "GENENAME" )
head(res)
```

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                      keys = rownames(res),
                      keytype = "ENSEMBL", 
                      column = "ENTREZID" )
head(res)
```

Save our annotated results object 

```{r}
write.csv(res, file = "results_annotated.csv")
```

## Pathway Analysis 

Now that we have our results with added annotation we can do some pathway mapping 

Let's use the **gage** package to look JEGG pathways in our results (genes of interest). I will also use 


```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

What **gage** wants as an input is not my big table/data.frame of results. It just wants a "vector of importance". FOr RNASeq data like we have this is out log2FC values... 

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```
```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```


```{r}
attributes(keggres)
```

```{r}
head(keggres$less, 3)
```

Let's use the pathview package to  look at one of these highlighted KEGG pathways without our genes highlighted. "hsa05310 Asthma"

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```
![](hsa05130.pathview.png)



